{Previous tutorial}[link:files/doc/tutorials/01-GettingStarted_rdoc.html]
{Next tutorial}[link:files/doc/tutorials/03-PlannedPath_rdoc.html]
= The GoForward tutorial: making a simple robot move
This tutorial will make you create a simulated robot controller which makes the
robot go forward at constant speed. It will show you what a task is, how to
start a Roby controller and how to interact with it using the Roby shell.

First, we will define a GoForward task model, represented by a subclass
of Roby::Task. Tasks, which are instances of this model, have two roles:
* they _represent_ the 'go forward' activity in the plan. i.e. it represents
  its properties, allowing to assess that its execution is going well
* they actually _make_ the robot 'go forward': they execute the code necessary
  to do it, or activate an external process which will do that.

What we will see here is the second point. The first point will be discussed in
more details in the fourth tutorial: {error handling}[link:files/doc/tutorials/04-ErrorHandling_rdoc.html]

= A first attempt
== Writing the robot task model, and writing the robot controller
Edit <tt>tasks/go_forward.rb</tt> and add
  class GoForward < Roby::Task
    # The GoForward task needs the robot speed to be specified
    arguments :speed

    # Block called at every execution loop. It simulates the robot moving at
    # the specified speed.
    poll do
      State.pos.x += speed
    end

    # No specific action should be taken to make the task stop
    terminates
  end

Now, create the robot we will be working on. In the roby application we
have created in {the first tutorial}[link:files/doc/tutorials/01-GettingStarted_rdoc.html],
run
  roby robot goForward

And in the controller file, <tt>controllers/goForward.rb</tt> do
  # Define the original value of x
  State.pos.x = 0

  # Will display the value of x every 1 second
  Roby.every(1) do
    puts State.pos.x
  end

  # Create the task and start moving !
  Roby.plan.insert(go = GoForward.new(:speed => 0.1))
  puts "Going forward at speed #{go.speed}"
  go.start!

You can then start the robot controller with <tt>scripts/run</tt> and stop it with CTRL+C.

  $ scripts/run goForward
  335705:25:08.324 (goForward) loading controller file /home/doudou/dev/roby-tutorials/controllers/goForward.rb
  Going forward at speed 0.1
  335705:25:08.356 (goForward) done initialization
  0
  0.9
  1.9
  2.9
  335705:25:16.449 (Roby) received interruption request
  335705:25:16.524 (Roby) control quitting. Waiting for 1 tasks to finish (1 tasks still in plan)

== Broken down explanation
* the line
    State.pos.x = 0 
  initializes the robot's state. In general, it is done in the robot's
  configuration file, config/goForward.rb (see below)
* the line
    arguments :speed
  in the task model tells Roby that the GoForward tasks require a 'speed'
  argument. If it is omitted, the task has no means to actually perform its
  action (it does not know at what speed it is supposed to move), and therefore
  cannot be started. Replace
    Roby.plan.insert(go = GoForward.new(:speed => 0.1))
  by
    Roby.plan.insert(go = GoForward.new)
  and you'll get

    Roby::EventNotExecutable in GoForward{}:0x4854d110[]/start: start! called on GoForward{}:0x4854d110[] which is partially instanciated
      ./controllers/goForward.rb:15

  a <i>partially instanciated</i> task being a task whose all required
  arguments are not set.

* we did not specify a robot name in the call to <tt>scripts/run</tt>. In that
  case, Roby instantiated a robot named 'goForward' of type 'goForward'
* in general, one does not want the robot to start moving just after
  initialization. To have an interactive interface to the robot's actions, you
  can use the <tt>scripts/shell</tt> tool. See below.

= Refining the goForward controller
== File loading at startup and configuration files
Roby loads many files at startup, whose exact set of files is determined by the
robot name and type. The general rule is that the files are loaded from the
least specific ones (i.e. the files common to all robots) to the most specific ones
(i.e. the files that are specific to a given robot name).

In this tutorial, the <i>task model</i> is global and will be loaded in all
controllers of this Roby application. The controller file, on the other hand,
is defined for the goForward robot.

What we want here is move the state initialization from the controller file
into the robot's configuration file. To do that, you just have to move the
corresponding line into <tt>config/$NAME.rb</tt>, which is in our case
<tt>config/goForward.rb</tt>, so that this latter file looks like

  Roby::State.update do |s|
    # define the original value of x
    s.pox.x = 0
  end

and test that everything still works !.

See Roby::Application for an explanation of how files are organized in a Roby
application.

== Interacting with the Roby controller
First, we usually don't want to hardcode the robot actions in its controller.
Instead, it is better to be able to <em>send a command</em> to the robot.  Do
do that, we must first define an <em>action</em> in the robot's main planner.
Edit <tt>planners/goForward/main.rb</tt> and add the following code to the
definition of the MainPlanner class.

  method(:move) do
      GoForward.new :speed => arguments[:speed]
  end

and remove the last three lines of controllers/goForward.rb. You can now start
the application and wait for the "done initialization" line.

  $ scripts/run goForward
  335814:29:25.107 (goForward) loading controller file /home/doudou/dev/roby-tutorials/controllers/goForward.rb
  335814:29:25.108 (goForward) done initialization
  0
  0

Now, start a shell and wait its prompt.

  $ scripts/shell
  >>

Let's now check that the <tt>move</tt> action does exist
  >> actions
  => [move]

... and start the move
  >> m = move! :speed => 0.2
  => GoForward{speed => 0.2}:0x4886b248[]

  >> m.running?
  => true
  >> running_tasks
  =>

                                  Task                            Since     State
  GoForward{speed => 0.2}:0x4886b248[]   Wed Apr 23 08:31:29 +0200 2008   running


Now, to stop it ...
  >> m.stop!
  => []
  task GoForward{speed => 0.2}:0x4886b248[] stopped by user request
  >> m.running?
  => false
  >> m.finished?
  => true
  >> m.success?
  => false
  >> m.failed?
  => true

The task has been interrupted. From the system point of view, it means that it
has not finished successfully, hence <tt>m.success?</tt> and <tt>m.failed?</tt>
return respectively false and true.

Now, to make the whole Roby controller quit:
  >> quit
  =>

Note that you don't have to restart the shell between to runs: if you start the
controller again, the same shell will reconnect automatically to the new
controller.
---
vim: tw=80 et
