---
title: ExecutionAgent
sort_info: 140
---

Available as Roby::TaskStructure::ExecutionAgent

See {rdoc_class: TaskStructure::ExecutionAgentGraphClass::Extension} for the list
of methods that are defined on Roby::Task and
{rdoc_class: TaskStructure::ExecutionAgentGraphClass} for the methods accessible on the relation graph.

Semantics
---------
Very often, especially in Roby, one will have to start external processes to do
some computation. In some cases, a single process could even support multiple
Roby tasks: i.e. it does multiple things at the same time -- for instance in the
[Rock deployed
components](http://rock-robotics.org/advanced_tutorials/100_deployments.html), one single
process can support the execution of multiple components.

When using such a pattern, it is important to represent the (very tight)
relationship between the _executed_ task and the underlying process. This
is done in Roby through the __ExecutionAgent__ relation.

'''How this is different from the Dependency relation''' The big difference
between a dependency relation and an execution agent relation is how tight the
relationship is. In the former, the relation is one of two tasks that are
interacting together, but where the end of one does not have any direct
implication about the end of the other. In the latter case, if the execution
agent dies, then the executed task is __already dead__. There is no recovery
possible.

The following event ordering constraints apply when using the execution agent
relation:

 * the execution agent must have a _ready_ event. The executed tasks can start
   only once this event has been emitted. This is used to differentiate, at the
   agent level, between having a started agent and an agent that can accept the
   execution of subtasks.
 * the emission of _stop_ on the agent is forwarded to the _aborted_ event of
   all running executed tasks.

An execution agent is added on a task using #executed_by

{coderay:: ruby}
executed_task.executed_by(execution_agent)
{coderay}

Automatic Spawning - Execution Agents at the model level
--------------------------------------------------------
One can declare execution agents at the level of task models. For instance:

{coderay:: ruby}
class MyTask < Roby::Task
    executed_by MyTaskAgent
end
{coderay}

It expresses two things:

 1. the tasks of that type must have an execution agent of the required task
    model 
 2. if a task does not have such an agent, the plan manager is allowed, at
    runtime, to create and start one. This is OK for simple cases but should be
    discouraged for complex cases.

Additionally, the plan manager could respawn the agent if the :respawn => true
option is given on the executed_by line.

Error Conditions
----------------
The ExecutionAgent relation does not imply any plan constraints.

Relationship to Scheduling
--------------------------
The ExecutionAgent relation has no direct influence on scheduling. It is up to
the plan building mechanisms to enforce the desired scheduling.
