---
title: Overview of Plan Objects
sort_info: 50
--- pipeline:tags,rdoc
There are two basic objects in Roby plans, both objects being equally important.
* *events*. They are both the basic command interface and the way to follow what
  happens in and outside of the robot.
* *tasks*. They represent the multiple processes that run on the robot: both the
  robot physical actions and the robot's internal processing.

== Events
The first use of events is the representation of milestones in the robot's
execution. For instance, a +reached_waypoint+ event would be _emitted_ when the
robot reaches its assigned waypoint. Accordingly, a +detected_object+ event
would be emitted when a visual object detection algorithm finds something.

The second use of events is that, some of them (the "controllable ones") allow
to _make_ things happen. I.e. they allow to make a specific event happen. The
set of controllable events therefore represents the basic commands that can be
sent to the robot's software.

The event command is then the mean to make a specific event happen <i>with
certainty</i>. For instance, +reached_waypoint+ cannot have a command, as
navigation is not a certain endeavour. Same thing for an hypothetical
+detected_object+ of a searching robot. But a +stop_moving+ event could have a
command. Then, by calling the command, the Roby controller would require the
robot to "stop moving !". When the robot actually performed that action, it will
inform the rest of the system that it stopped moving by emitting the event.

== Tasks
To represent more complex actions, that cannot be represented by the simple
event command/emission scheme, Roby has a concept of <b>task</b>. A task
represents a long-standing process, which can be supervised along its execution.
One important "feature" of the task concept is that <i>a task can fail</i>.

For instance, the basic task ({rdoc_class: Task}) has four default events:
* a +start+ event
* a +stop+ event
* a +success+ event
* and finally a +failed+ event

On the one hand, a nominal execution of this task would be:
* the +start+ event is emitted
* the +success+ event is emitted
* the +stop+ event is emitted

On the other hand, a failed execution would be:
* the +start+ event is emitted
* the +failed+ event is emitted
* the +stop+ event is emitted

Then, a bit more complex task could be allow interruption. For this new task, we
would need a new event (+interrupt+) and a command. One way to do it would be
to have a _controllable_ +interrupt+ _event_ in the task. Its (interrupted)
execution would then be
* the +start+ event is emitted
* the command of the +interrupt+ event is called
* the +interrupt+ event is emitted
* the +stop+ event is emitted

Another way to see it would be that an interruption command is a way to require
that the task stops. Therefore, one could want the following execution instead:
* the +start+ event is emitted
* the command of the +stop+ event is called
* the +interrupt+ event is emitted
* the +stop+ event is emitted

The second way is the actual convention for interruptible tasks in Roby. It is
important, as -- as we will see later -- an important feature is that Roby stops
tasks for you.

