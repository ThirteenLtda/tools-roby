---
title: Events
sort_info: 100
--- name:content pipeline:tags,markdown,blocks
Events
======

The basics
----------
We'll see here the basic manipulation around events. We'll see how to associate
a command with an event (event command), how to call code when an event is
emitted (event handlers), how to call it and how to emit it.

In the plan, events are represented through the {rdoc_class: EventGenerator}
class. With the following code, you will create an event that has no command (it
is called a _contingent_ event, or a _non-controllable_ event):

{coderay:: ruby}
 >> ev1 = Roby::EventGenerator.new
 >> plan.discover(ev1)
{coderay}

To be able to see the event's emission, we would display something using an
_event handler_: a piece of code that is executed when the event is
emitted.

{coderay:: ruby}
 >> ev1.on { |e| puts "ev1 emitted with context=#{e.context.inspect}" }
{coderay}

To emit it, you would write:
{coderay:: ruby}
 >> ev1.emit
 ev1 emitted with context=nil
{coderay}

And if you would like to associate data with the event (what is called the event
context), you would do
  
{coderay:: ruby}
 >> ev1.emit(10)
 ev1 emitted with context=[10]
{coderay}

Let's now create a second event

{coderay:: ruby}
 >> ev2 = Roby::EventGenerator.new do |argument|
 ?>   puts "ev2 called with argument=#{argument.inspect}"
 ?>   ev2.emit(argument.first + 1)
 >> end
 >> plan.discover(ev2)
 >> ev2.on { |ev| puts "ev2 emitted with context=#{ev.context.inspect}" }
{coderay}

This second event is _controllable_: the block given to EventGenerator.new being
that command. As one can see, a command accepts an argument. Moreover, the
purpose of that command is make sure the event is emitted. Here, it is done
by calling emit directly. More complex (asynchronous) schemes can also be built,
but in general they would be represented by tasks (that we will see later on).

Let's try our controllable event
{coderay:: ruby}
 >> ev2.call(10)
 ev2 called with argument=[10]
 ev2 emitted with context=[11]
{coderay}

Reacting to events
------------------
The whole point of having a *plan* is to be able to describe _reactions_: i.e.
how the system should react when something happens. The basic tool to do that,
is to create a _signal_ between two events:

{coderay:: ruby}
 >> ev1.signals ev2
{coderay}

Try it:

{coderay:: ruby}
 >> ev1.emit(10)
 ev1 emitted with context=10
 ev2 called with argument=10
 ev2 emitted with context=11
{coderay}

You can therefore see that

 * because of the signal, the _emission_ of the first event caused the second
   event's command to be called.
 * the signalling transforms the event's _context_ into the target command's
   _argument_.

Composing events
----------------

Another important capability around events is the ability to _compose_ them. Two
basic operators exist.

For instance, in the following snippet, "and_ev" is emitted when _both_ ev1
__and__ ev2 have been emitted and "or_ev" is emitted as soon as _one of_ ev1
__or__ ev2 have been emitted.

{coderay:: ruby}
 >> plan.discover(ev1 = EventGenerator.new)
 >> plan.discover(ev2 = EventGenerator.new)
 >> and_ev = ev1 & ev2
 >> or_ev  = ev1 | ev2
 >> and_ev.on { puts "AND" }
 >> or_ev.on { puts "OR" }
 >> ev1.emit
 OR
 >> ev2.emit
 AND
{coderay}

You can see that the "OR" event is emitted only once. If you want it to be
emitted every time one of its sources are, you would do:
{coderay:: ruby}
 >> or_ev = ev1 | ev2
 >> or_ev.on { puts "OR" }
 >> or_ev.on { or_ev.reset }
 >> ev2.emit
 OR
 >> ev2.emit
 OR
 >> ev1.emit
 OR
{coderay}

In the same way, the "AND" event is emitted only once. You can also use #reset
to make it emit again.

Common errors when manipulating events
---------------------------------------

A common error is to try to manipulate an event which is not included in a
plan (objects are included in plans through the #discover call). In that case,
the event is not executable and you will get the following error:

{coderay:: ruby}
 >> ev = EventGenerator.new { }
 >> ev.call
 Roby::EventNotExecutable: #call called on #<Roby::EventGenerator:0x484aa3c0> which is a non-executable event
 >> ev.emit
 Roby::EventNotExecutable: #emit called on #<Roby::EventGenerator:0x484aa3c0> which is a non-executable event
{coderay}

Another common error is to try to call (or signal) and event that is non
controllable. In that case, Roby raises a {rdoc_class: EventNotControlable}
exception.

{coderay:: ruby}
 >> plan.discover(ev = EventGenerator.new)
 >> ev.call
 Roby::EventNotControlable: #call called on a non-controllable event
 >> source = EventGenerator.new
 >> source.signal(ev)
 Roby::EventNotControlable: trying to establish a signal from #<Roby::EventGenerator:0x484a77f8> to #<Roby::EventGenerator:0x484aab88> which is not controllable
{coderay}

