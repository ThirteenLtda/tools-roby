---
title: Building Plans
sort_info: 150
---

In a Roby application / Roby controller, the task of building plans, i.e. adding
[tasks](tasks.html) and [events](events.html), and adding relations between them
is given the __planning interface__.

In effect, the planning interface is not an interface to a planner. It is just
an interface that allows to, dynamically, ask "something" to build a plan to
realize an action. This page will describe this planning interface, and how it
can be accessed at runtime.

The planning scripts that we are going to describe below are defined in files in
the models/planners/* directory, and models/planners/ROBOT directories (i.e.
models/planners/asguard/ is going to hold planners that should only be defined
when the system has been started with the -rasguard option).

Planning methods
----------------
Planning methods are code blocks (in effect, Ruby methods) that get a set of
arguments and return an instance of Roby::Task. They are describing the __action
interface__ of your robot. I.e. if one wants to make a robot move, he would do
(in the relevant planner class, we'll talk about that later)

{coderay:: ruby}
method(:move_to) do
  task = MoveTo.new(arguments[:target_point])
  # Create other tasks, [add relations](../relations) between them tasks, create
  # links between the tasks events, add [polling and scripting](code.html)
  task
end
{coderay}

The task returned by the planning method will be used to represent the required
action.

In general, building plans manually like this gives you the greatest
flexibility, but also requires you to understand a lot about Roby. The
recommended way to do this kind of behaviour aggregation is to create a toplevel
task, such as the MoveTo task above, and define either a task script -- if that
is enough -- or a task state machine to represent the more complex behaviour:

{coderay:: ruby}
method(:move_to) do
  task = MoveTo.new(arguments[:target_point])
  task.script do
    # Use the script to define your behaviour. The start(:planning_method_name!)
    # or start(task_model) instructions allow you to add subtasks
  end
  task
end
{coderay}

MainPlanner and defining additional planners
--------------------------------------------
By default, Roby defines a planner class to hold all these planning methods.
This class is called MainPlanner and is available globally. It is, by default,
modified in planners/models/main.rb.

When systems grow larger, or in order to allow for reusing the planner models,
one can define its own planning classes. This can be done by subclassing
Roby::Planning::Planner:

{coderay:: ruby}
class MyPlanner < Roby::Planning::Planner
end
{coderay}

Moreover, in order for this planning model to be made available to the action
interfaces that are described below, one has to add the planner to the list of
planner models in Roby.app.planners. This is usually done in config/ROBOT.rb,
but could also be done dynamically.

Dynamically querying planning methods
-------------------------------------
Once planning methods are defined, they can be accessed through two principal
means:

__From within the Roby controller__, one can inject a new mission in the plan
from the planning interface using the Robot singleton object:

{coderay:: ruby}
Robot.move_to!
{coderay}

__From the Roby shell__, one does the same by using typing move_to!.

