---
title: Executing code
sort_info: 125
---
Roby allows you to mix model-based descriptions (the tasks, the plan, ...) with
model-free code.

The first forms an __explicit__ representation of the system's activity, on which other
tools can reason. That's the interest: one can reason on it, and -- for instance
-- detect problems before they actually appear, or provide information about the
future to other systems, or ...

The second allows to iron out the "gory details". While model-oriented
development is all nice on the paper, real systems are usually not "sticking" to
the model willingly. This aspect of Roby allows to adapt the model to the real
thing.

This page will cover how you can have some code executed at runtime, and in
which conditions

Event commands and event handlers
---------------------------------
These have already been described (see [here](tasks.html) and
[there](events.html)).

Executing an event command through a subtask (or subplan)
---------------------------------------------------------
It is, sometimes, desired that the command of an event is realized by a task
itself, instead of simply using a code block.

At execution time, this can be done with

{coderay:: ruby}
event.achieve_with(task)
{coderay}

The corresponding task will be started, and the event is going to be emitted as
soon as the task's success event is emitted. The task can, obviously, be the
root task of a complete Roby subplan.

Polling handlers
----------------
Poll handlers are code blocks attached to tasks. These code blocks are executed
__if the task is running__ at each of the system's execution cycle (by default,
it means once every 100ms).

A single polling block can be defined on task models:

{coderay:: ruby}
class MyTask < Roby::Task
  poll do
    # Code executed if any instance of class MyTask
    # is running
    #
    # In here, +self+ refers to the task instance
  end
end
{coderay}

It can also be attached to a task instance with

{coderay:: ruby}
task = MyTask.new
task.poll do
  # Code executed if +task+ is running
  # In here, +self+ refers to the caller object (i.e. the object that added the
  # poll block). Use +task+ to refer to the task instance
end
{coderay}

While there can be only one class-level polling block, there can be more than
one instance-level polling blocks.

State machines
--------------
TBD

Scripts
-------
Scripts offer a more script-like (i.e. step-by-step) representation of code
blocks, in ways that can interact with other. For instance:

{coderay:: ruby}
task = MyTask.new
task.script do
  # Redirect log messages to the logger on Robot
  setup_logger(Robot)
  # Wait for the ready event of the task's localization child to
  # be emitted. It returns immediately if the event has been
  # emitted in the past
  wait_any(localization_child.ready_event)
  # Send a log message
  info "localization ready, starting to move"
  # Start the movement task
  poll_until(movement_child.start_event) do
    movement_child.start!
  end
  # Wait for the target position to be reached
  poll do
    if State.position.x > 10
      transition! # exit from the poll loop
    end
  end
  # Emit success
  execute do
    task.success!
  end
end
{coderay}

The commands available in scripts are detailed [in the API
documentation](../../api/Roby/TaskScripting/Script)

