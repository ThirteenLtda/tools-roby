---
title: The Reactor Pattern
sort_info: 10
---

__Note__ all the code blocks in this page are pseudocode. They are close to what
you will do in Roby, but are not Roby API.
{: .warning}

The execution layer in Roby can be summarized in a single big loop:

{coderay:: ruby}
loop do
  events = read_events
  react_to_events(events)
end
{coderay}

Where 'events' can represent anything: from some sensor data (e.g. a button got
pressed), to some reports from some outside process (e.g. process X crashed), to
some events internally generated inside the Roby process itself (you're late for
your 12:00 appointment).

The __reaction__ to these events is some code that is being executed.  Roby has
quite a few ways to handle this, but we won't talk about it yet. The important
point, to understand the concept of the __reactor pattern__ is that the complete
execution cycle above is __single threaded__. It means that the code that reacts
to these events should __never block__ (or it will block the complete reactor).

Let's assume we have two events: button_pressed and button_released. One could
(naively) do:

{coderay:: ruby}
button_pressed.on do |event|
  # Wait for the button to be released
  while !button_released.emitted?
    sleep 0.1
  end
  puts "you successfully clicked the button !"
end
{coderay}

Since the reactor is single threaded, the button_released.emitted? method
__cannot__ change value: if it has been released in the past, it will return
true, otherwise it will always return false as the first line of the main loop
is not executed until the block returns. The right way to code this behaviour in
a reactor would be:

{coderay:: ruby}
emitted = false
button_pressed.on do |event|
  emitted = true
end
button_released.on do |event|
  if emitted
    puts "you successfully clicked the button !"
  end
  emitted = false
end
{coderay}

