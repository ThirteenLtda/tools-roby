---
title: Event Propagation
sort_info: 100
---

The execution flow in Roby is basically:

 * gather a set of initial events, generated for instance by external processes
   (functional layer) or internal supervision mechanisms.
 * propagate those events.

The initial event set, that is the set of events that actually need to be
propagated, is generated at the beginning of the propagation phase. There are
mainly two sources for it:
 * external sources, that is a functional layer or a needed reaction to the
   robot's state change.
 * delayed events.
 * internal scheduling decisions.

Interfacing external sources
----------------------------
The canonical way to interface Roby with external sources is to either use the
task's #poll block which we already saw, or to globally define periodic handlers
that poll those sources. There are two ways to define such handlers:

Roby.each\_cycle which calls the block given to it at the beginning of each
propagation phase (each execution cycle).

{coderay:: ruby}
Roby.each_cycle do
  ...
end
{coderay}

Roby.every which calls the given block at a periodic rate:

{coderay:: ruby}
Roby.every(time_in_seconds) do
   ...
end
{coderay}

Of course, these two methods can also be used for other purposes (like
periodically displaying the robot's position for instance).
{:block}

Delaying actions
----------------
We already saw the ability to delay event signalling and forwarding. Namely, the
following calls:

{coderay:: ruby}
    source.signals target, :delay => 10
    source.signals target, :at => (Time.now + 10)
    source.forward_to target, :delay => 10
    source.forward_to target, :at => (Time.now + 10)
{coderay}

will delay the target's call or emission for the specified amount of seconds
(:delay) or until the specified timepoint is reached (:at). In these cases, the
delayed events will be part of the initial event set in a future execution
cycle.

One can also delay the execution of some arbitrary action using Roby.once.  This
method will make sure that the block given to it is executed at the beginning of
the next execution cycle.

{coderay:: ruby}
Roby.once do
  ...
end
{coderay}

As for Roby.each\_cycle and Roby.every, this method can also be used for other
purposes (like displaying a message for instance).
{:block}

Scheduler
---------

"Scheduling is the process of deciding how to commit resources between a variety
of possible tasks" (Wikipedia). Roby plans, in general, specify how tasks should
follow each other or interact between each other, but they do not specify
__where to start__. That is the job of the scheduler.

Remember the end of the [presentation of the interactive
shell](../basics/shell.html) ? The newly created task was started automatically.
The default Roby scheduler saw this task and decided that, given that it was the
only action the robot had to do, then it should do it.

The default scheduler ({rdoc_class: Schedulers::Basic}) starts tasks:
 * that are root in the hierarchy relation
 * whose start event is controlable (obviously)
 * whose start event is root in the event graph (i.e. not child of a signal or
   forward relation for instance).

In other words, the default scheduler starts the high-level missions of the
robot that do not have a predecessor.

Note that it is possible to disable any scheduling by assigning 'nil' to
Roby.engine.scheduler:
{coderay:: ruby}
Roby.engine.scheduler = nil
{coderay}

One can also reimplement its own scheduler. See roby/schedulers/basic.rb for an
example. The new scheduler is then selected by doing:
{coderay:: ruby}
Roby.engine.scheduler = MyOwnScheduler.new
{coderay}

in config/init.rb

Event propagation, #call and #emit
----------------------------------
This section will not go into too much details, but what you have to know in
practice is that when the #emit or #call methods are called, __the corresponding
action is not taken right away__. Instead, the emission or call is registered in
a separate queue and will be handled later.

The main reason for this is to provide a sane behaviour in conditions where
multiple propagation paths (i.e. chains of signals/forward) lead to the same
event. For instance, on the next figure, the initial emission of _a_ could lead
to having _d_ emitted twice in the current execution cycle, which is something
that we want to avoid.

![](propagation_diamond.png)

Because of this property, it is **forbidden** to use #emit and #call outside (1)
the control thread and (2) outside the propagation phase (the other phases will
be introduced later on). The places where it is safe to do so are:

 * event commands and event handlers
 * polling handlers
 * periodic handlers
 * blocks given to Roby.once

If you use these two method calls in a "forbidden place", the PhaseMismatch
error will be raised. You can then simply fix this usage by queueing the call
with Roby.once: instead of using

{coderay:: ruby}
   my_task.start!
{coderay}

simply do

{coderay:: ruby}
   Roby.once { my_task.start! }
{coderay}

The block will then be called at the beginning of the next execution cycle, in
the propagation phase.

Unreachable events
------------------

There are means, in the engine to declare that an event will __never__ be
emitted anymore (the principal one being EventGenerator#unreachable!). This is
useful in general, as it allows to realize that something that is _needed_ by
the good execution of the system will actually never happen. This is actually
how a big part of the error detection mechanism works.


