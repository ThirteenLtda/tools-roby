---
title: Error Sources
sort_info: 190
--- name:content pipeline:tags,markdown,blocks

Where do errors come from ?
---------------------------

In a robotic system, errors can come from multiple sources:

 * the most obvious one is the _environment_. In this case, an "error" is the
   inability for the system to cope with its current environment. This usually
   translates into the failure to reach a goal, or an algorithm malfunction.
   A great example of this is the hesitation that some local obstacle avoidance
   have: the algorithm goes into an endless (or at least very long) loop because
   it hesitates between two solutions.
 * failing hardware. Hardware can fail and in this case the supervision system
   has to cope with a "crippled" robot.
 * the other source is the programmer itself: the robotic system mainly runs on
   software, which - as all software - has bugs. Even the supervision system's
   code can have bugs. As we will see later on, even this latter case is at
   least partially taken into account.

In Roby terms, these three sources of errors take essentially two forms:

 * the plan is inconsistent. Task and event relations may define _constraints_,
   and the plan is said to be inconsistent if one of those constraints are not
   met. Example: the hierarchy relation lists some events that should be emitted
   and some that should not. A failure to meet one of these constraints is
   interpreted by the Roby kernel as an error that must be dealt with. This can
   be used to represent problems with the environment (failure to complete
   a task).
 * the Ruby code raises an exception. Most of the time, it will be caused by
   a bug in the code, but also may be a way to represent a problem with
   a particular process (the "bug in external software supervised by Roby"
   case).

When using Roby to control a complex robotic systems, one will usually have two
different kind of tasks in the plan. On one side, some tasks are mapped
one-to-one with actual external processes as for instance a task that is running
in a module of the robot's functional layer. For these, the task's implementation
has two roles:

 * use the means of communication it has with the external process. In the
   functional layer case, the modules usually have ways to report their state
   and, if needs be, the occurrence of errors.
 * _diagnostics_. In this case, the task does not assume that what the external
   process is reporting is true, but instead tries to assess the external
   process states by indirect means. A simple example is to verify that the
   output values of the module is within specified boundaries.

The most robust strategy is to actually do _both_. Simple diagnostics can be
implemented using the task's __poll__ block. More complex ones can use two
different tasks (one task for the process, one task for the monitoring), and
according task relations.

On the other side, the hierarchy relation allows to create more abstract views
of the plan: an abstract action (e.g. MoveTo) is decomposed into actual external
processes (e.g. Localization, Control, PathPlanning). Nonetheless, it is
still possible at the abstract level to monitor the good progress of the task.
It is actually possible, at this level, to spot problems that the lower levels
where missing, as for instance a recurring hesitation of the robot in a movement
task, that forbids him to reach its goal.

In any case, Roby offers a unique way to represent __fault modes__. Instead of
having a binary success/failure outcome, it is possible to define an arbitrary
set of terminal events. Then, by forwarding these events to either _success_ or
_failed_, the events become either a nominal outcome or a fault mode. As we will
see later on, it has an interesting impact on the fault handling possibilities.

Taking the example of the hesitation problem, one would write:

{coderay:: ruby}
class MoveTo < Roby::Task
   event :hesitates
   forward :hesitates => :failed
end
{coderay}

and then {coderay:: {lang: ruby, wrap: span}}emit :hesitates{coderay} when
applicable.

Using tasks as an error isolation mechanism
-------------------------------------------

As we mentionned earlier, Roby tries to as much as possible isolate exceptions
that are coming from "user code", i.e. event commands and handlers, polling
blocks. The "isolation mechanism" is to associate these exceptions to a
particular operation on a task or event.

In practice, the following things can happen in a task's lifetime:

 1. the 'start' command raises an exception. This exception is wrapped in a
    {rdoc_class: CommandFailed} instance, the task is marked as failed (both
     #failed\_to\_start? and #failed? return true) and all its events are marked as
    unreachable. The failure reason (returned by Task#failure\_reason) and the
    unreachability reason are both the CommandFailed instance.
 2. the command or handlers of an intermediate event, or the polling block raise
    an exception. In that case, the <tt>internal_error</tt> event is emitted
    with said exception as context. This event either signals the stop event if
    the stop event is controlable, or forcefully emits <tt>failed</tt>.
 3. the command or handler of a terminal event raise an exception. If it was
    during a normal termination, then it is handled in the same way than in 2.
    (internal\_error is emitted). Otherwise, then a {rdoc_class:
    TaskTerminationFailure} error is injected in the error handling and the 
    [task is put into quarantine](garbage_collection.html).

Error representation in the API
-------------------------------

In practice, error handling operates on {rdoc_class: LocalizedError} instances.
This new instance refers to the original error (if there is one, see for
instance {rdoc_class: CommandFailed}).
The error source will be as specific as possible: either a specific event
emission (returned by #failed\_event), an event generator (returned by
 #failed\_generator, for instance if the error is due to an event that has become
unreachable) and finally a task (returned by #failed\_task).

On creation, LocalizedError will "fill in the blanks", i.e. it will for instance set
failed\_generator and failed\_task if the error source is an emission that comes
from a task.

Once created, this error gets registered in the execution engine by
calling <tt>ExecutionEngine#add_error</tt>.

