---
title: Error Handling
sort_info: 200
--- name:content pipeline:tags,markdown,blocks

Integration in the execution cycle
----------------------------------
As was just explained, errors take two forms in Roby:

 * failure to meet the constraints set by the task/event relations
 * exceptions that come from the Ruby code

For language exceptions, we will actually have to distinguish between exceptions
that come from task/event code (essentially event commands and handlers, polling
blocks) and Roby code itself.

The root of error handling is to be able to automatically compute what the
consequences of an error are. In Roby, the plan has the role of showing these
links (a task's failure impacts the tasks that depend on it, i.e. its parents in
the hierarchy relation). Therefore, Roby is only able to handle these errors
that can be associated with a task (this error impacts that task), namely: the
exceptions that come from task/event code and the constraint violations. The
other exceptions (that come from Roby code that is not assigned to a task/event)
are not handled automatically by Roby. They lead by default to a shutdown of the
whole system.

In the execution cycle, Roby runs a constraint analysis on the whole plan _after
the event propagation phase_. This is because that pass has to see the "big
picture", i.e. the result of all the event propagation in the current cycle.
See [this page](../relations/new_relations.html) for details on how to integrate
a constraint analysis routine from a task/event relation.

We will now see the three means of error handling that Roby offers, and then
conclude with an overview of the whole error handling phase.

Repairing the plan during the event propagation
-----------------------------------------------
As has just been noticed, Roby has to analyze the plan __after__ all events have
been propagated. So, if a constraint gets both violated *and* repaired during
the event propagation phase, that won't really count as an error.

That mean of "error repair" is useful for simple cases. The most obvious case is
when a task should simply be restarted when it fails, for instance because the
failure is a spurious error.

As an example, I had a robot where the control module, in the functional layer,
was checking that its input data flow was updated often enough (timeout).
This is a fine design decision given the security it adds. And was working fine
on the realtime operating system the functional layer was originally running on.
But when I came at this lab, the functional layer was running on a standard
Linux kernel, and therefore there were outliers in the command update rate (i.e.
latencies much higher than expected). They were rare, but they happened.

Changing the timeout was not the right solution, as its effect would have to
actually make it much less useful (we would have had to move it to more than one
second). So, I had to handle this in the supervision layer.

How it was done was the following: whenever that particular failure message was
coming in (<tt>poster\_not\_updated</tt>), the control task was simply restarted
_unless it had already been restarted in the last second_.

It was implemented like this:

{coderay:: ruby}
on :poster_not_updated do |event|
  if (TrackSpeedStart.last_error - Time.now) > 1
    plan.respawn(self)
    TrackSpeedStart.last_error = Time.now
  end
end
{coderay}

Where <tt>plan.respawn</tt> do the job of creating a new task of the same type
and with the same arguments, replacing the current version with the new instance
and start the new instance.

The execution trace looks like the following, with the original plan in the left
and the plan after the error on the right.

![](error_instantaneous_repair.png)

Plan repairs: asynchronous reparations
--------------------------------------

Roby's exception system: synchronous reparations
------------------------------------------------

What to do with non-repaired tasks ?
------------------------------------

Well, that's actually the subject of the next page. In summary: since they're
not repaired, they count as being potentially harmful to the system and
therefore are stopped automatically by the garbage collection mechanism.

Summary
-------


