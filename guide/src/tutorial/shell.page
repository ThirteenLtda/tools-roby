---
title: Interactive Shell
sort_info: 400
---

As we saw earlier, the execution of Roby applications is done by an _event
loop_. The reactivity of the supervision system obviously depend on the
non-interruption of that event loop. Therefore, in a Roby application, the user
runs a remote shell that is used to send specific commands to the Roby
application itself.

Planners
--------
Right now, we saw two different places where code is stored:

1. the models/tasks/ files, where task models are defined
2. the scripts/controllers/ files, which is the startup code for the application

What we will see in this section is a third component: the **planners**. These
planners define the aggregate actions that the robot knows about. As we will see
later, they also are the user interface of the robot.

Exporting actions to the user's shell
-------------------------------------

Edit models/planners/goForward/main.rb and edit so that it looks like this:

{coderay:: ruby}
require 'models/planners/main'
class MainPlanner
  describe('moves the robot in a forward direction').
    required_arg('speed', 'the speed in m/s at which the robot should move')
  method(:move) do
    GoForward.new :speed => arguments[:speed]
  end
end
{coderay}

That exports a very simple action to the user's shell. Now, we can try out the
Roby shell. First, remove the last three lines in scripts/controllers/goForward.rb so
that it looks like this:

{coderay:: ruby}
# Define the original value of x
State.pos.x = 0

# Will display the value of x every 1 second
Roby.every(1) do
  puts State.pos.x
end
{coderay}

Now, start the roby application in one console:

    $ roby run goForward
    44848:44:51.498 (Roby) GC.enable does not accept an argument. GC will not be controlled by Roby
    344848:44:51.581 (goForward) loaded Roby 0.7.90 on ruby 1.8.7 (2008-08-11 patchlevel 72) [powerpc-linux]
    344848:44:51.603 (goForward) loading controller file /home/doudou/dev/roby-tutorials/controllers/goForward.rb
    344848:44:51.605 (goForward) done initialization
    0
    0

Finally, start the shell in another console:

    $ roby shell
    localhost:48902 >

Note that the shell does not have to be executed on the same machine than the controller.
You can connect remotely with the --host option
{: .note}

The new prompt you get is a Ruby prompt (i.e. you should type Ruby code in it).
Some special commands are available to interact with the Roby controller. For
instance:

{coderay:: ruby}
> actions
move! :speed => speed
moves the robot in a forward direction
  Argument | Description                                    
  ----------------------------------------------------------
  speed    | the speed in m/s at which the robot should move
{coderay}

The 'action' command lists the available planning methods that are exported
through the MainPlanner class. Let's try it (**notice the '!' at the end of
move!**):

{coderay:: ruby}
> move! :speed => 1
=> #<service Roby::Task:0x7f06da2ab308{}[]>
localhost:48902 >
[1] move! started to plan
[1] move!: Roby::Task:0x7f06da2ab308{}[] has been replaced by GoForward:0x7f06da28f298{speed => 1}[]
[1] move!: task GoForward:0x7f06da28f298{speed => 1}[] started
[1] move!: task GoForward:0x7f06da28f298{speed => 1}[] failed
[1] move!: task GoForward:0x7f06da28f298{speed => 1}[] has been removed
> kill_job 1
{coderay}

The __intent__ to run the move is first added to the plan. Then, it gets
developped by calling the planning method (the "started to plan" stanza), and
the result replaces the placeholder task ("has been replaced by ..."). It then
becomes eligible for [scheduling](../concepts/execution.html#scheduling) and is started.

The value returned by the move! call can also be manipulated as if it was a task itself. For instance:

{coderay:: ruby}
> t = move! :speed => 1
=> #<service Roby::Task:0x7f06da2ab308{}[]>
[1] move! started to plan                                                                                                                                        
[1] move!: Roby::Task:0x7f06da2ab308{}[] has been replaced by GoForward:0x7f06da28f298{speed => 1}[]
[1] move!: task GoForward:0x7f06da28f298{speed => 1}[] started
> t.running?
=> true
> t.stop!
[3] move!: task GoForward:0x7f06da215e20{speed => 1}[] failed
[3] move!: task GoForward:0x7f06da215e20{speed => 1}[] has been removed
{coderay}

