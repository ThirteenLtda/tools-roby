 Plan representation and modifications to plans

Understanding the plan model, and how to modify it, is central to the use of
Roby. In effect, the plan *is* the information on which the controller bases
itself to control the robot ...

== Plan objects
In Roby, plans are made of tasks and events. See {my
papers}[link:files/doc/papers_rdoc.html] for an in-depth description of the
model.

On the one hand, Roby::EventGenerator instances represent the plan's _possible_
events. This is by contrast to the Roby::Event class, whose instances represent
the <em>actual events</em>. In other words, an Event instance represent an
event which has already been emitted while an EventGenerator instance
represents a source of events, therefore a kind of events that could possibly
be emitted.

On the other hand, instances of Roby::Task represent the activities of the
system. Special subclasses of Roby::EventGenerator and Roby::Event are used in
tasks, to represent some particular properties of task's events:
Roby::TaskEventGenerator and Roby::TaskEvent.

== Plan relations
Roby::EventGenerator instances can be linked to each other through the use of
<em>event relations</em>, as Roby::Task can be linked through the use of <em>task relations</em>.
Task and event relations are defined in the Roby::EventStructure and
Roby::TaskStructure relation spaces (Roby::RelationSpace instances), through the use of
Roby::RelationSpace#relation. Each relation object (for instance
Roby::EventStructure::Signal or Roby::TaskStructure::Hierarchy) is an instance
of the Roby::RelationGraph class.

In order to be managed in these relations, tasks and events
include the Roby::DirectedRelationSupport mixin to provide the basic
management tools needed by the RelationGraph instances. Moreover, all relation
types define specific methods which allow to more directly modify the relation
(like #add_signal, #each_parent or #parents in Hierarchy). See RelationSpace#relation
for details. Due to issues with Ruby's documentation system, those methods are
listed in 

=== Plan modification
Modifying the plan therefore boils down to two things:
1. adding and removing tasks and events in the plan
2. adding and removing relations between objects of the same type (between tasks
   or between events).

The first point is done by the following methods:
* Roby::Plan#discover: simply add tasks and events
* Roby::Plan#add_mission: adds special tasks, called missions. Missions are the
  tasks the robot is supposed to execute. They are not subject to the plan's
  garbage collection, and the tasks that are useful to them are not either.


To ease the plan management process, some synthetic
operations are defined on Roby::Plan:
* the _replacement_ operation: Roby::Plan#replace_task and
  Roby::Plan#replace. #replace_task(a, b) will replace +a+ by +b+ in the plan.
  It means that the operators will add to +b+ all the children and parents of +a+
  in all relations, and do the same with +b+ and +a+'s events. Moreover, it will
  remove them from +a+. #replace(a, b) will do the same, but constraining itself
  to the _parents_ of +b+ and +b+'s events. It therefore replaces +a+ and its
  generated subplan (i.e. +a+ and all children of +a+) by +b+ and its subplan.
* the _respawning_ operation: a given task is replaced by a new task of the same
  kind and with the same parameters. This is used mainly to workaround a
  "fragile" task which crashed spuriously.


