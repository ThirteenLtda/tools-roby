== Getting started
=== Initializing an empty Roby application
Go into a shell into the directory you want your application in and run
  roby init

The following directories are created:
tasks:: definition of task models
planners:: definition of planner models
controllers:: definition of the robot controllers
data:: data files
config:: robots configurations
test:: the test suites
log:: the log files (output of the last run)
results:: sets of logs that have been saved by scripts/results
scripts:: the standard Roby tools. Call them with --help to know what they are doing

A specific Roby environment is defined by an /environment name/, a /robot name/
and a /robot type/. The sets of models (tasks and planners) can be sorted into
* a set of models common to all robots and robot types
* a set of models specific to all robots of the same type
* a set of models specific to a specific robot

One can also have a common set of data and a set of data specific to a environment

=== Creating a simple robot
We'll now create a simple robot which have only one action possible: going forward. 
Run
  roby robot bulkHead

This creates the basic templates for the robot type bulkHead:
* config/bulkHead.rb holds the bulkHead-specific configuration. It is loaded after
  the Roby core and plugins are loaded, and before the robot can do anything.
* planners/bulkHead/main.rb is the main planner for the robot. It defines all the
  entry points to the high-level actions known to the robot.
* controllers/bulkHead.rb is the controller file for bulkHead robots. It is supposed
  to start and/or setup things <b>after</b> the complete environment has been set up.
  It can, for instance, start communication with other agents, ...

=== Tutorials
* the BulkHead[link:files/doc/BulkHead_rdoc.html] tutorial shows how to create a simple task, and how to
  make the application run
* the PlannedPath[link:files/doc/PlannedPath_rdoc.html] tutorial shows how to create a
  more complex task structure

---
vim: tw=80
