#! /usr/bin/env ruby
require 'roby'
require 'optparse'

def usage
    STDERR.puts <<-EOU
roby-log mode [options]
where the following modes are accepted:
    list-servers    lists the log servers available
    upgrade-format  upgrades an event log from an old format to the current one
    rebuild-index   rebuilds the index file for the given event log
    stats	    displays statistics about the given event log
    decode	    show the content of the log file in raw format
    help	    this help message

Call roby-log mode --help for more information about each mode
    EOU
end

STDOUT.sync = true

SERVER_LIST_TIMEOUT = 5
SERVER_LIST_POLL = 0.1
case mode = ARGV.shift
when "list-servers"
    DRb.start_service "druby://:0"

    require 'roby/log/server'
    puts "Finding available servers ... (#{SERVER_LIST_TIMEOUT} seconds)"

    broadcast = if ARGV.empty? then ['localhost']
		else ARGV
		end

    Roby::Log::Server.enable_discovery broadcast

    begin
	end_time = Time.now + SERVER_LIST_TIMEOUT
	known_servers = []
	while end_time > Time.now
	    sleep(SERVER_LIST_POLL)
	    Roby::Log::Server.available_servers.each do |server|
		next if known_servers.include?(server)
		known_servers << server

		remote = Roby::Log::Client.new(server)
		puts "#{server.__drburi}:"
		remote.streams.each do |s|
		    puts "  #{s.name} [#{s.type}]"
		end
	    end
	end
    rescue Interrupt
    end
    exit(0)

when "upgrade-format"
    require 'roby/log/upgrade'
    Roby::Log::Upgrade.to_new_format(ARGV[0])
    exit(0)

when "rebuild-index"
    require 'roby/log/file'

    Roby::Log::Logfile.open(ARGV[0]) do |logfile|
	logfile.rebuild_index
    end
    exit(0)

when "stats"
    require 'roby/log/file'
    require 'roby/log/timings'

    filename = if ARGV[0] == "--csv"
		   do_csv = true
		   ARGV[1]
               elsif ARGV[0] == "--help"
                   puts "roby-log stats [--csv]"
                   puts "  displays statistics about the execution timings"
                   puts "  if the --csv option is given, a table with all"
                   puts "  the timings is output on stdout instead"
                   exit(0)
               else
		   ARGV[0]
	       end
    io = Roby::Log.open(filename)

    cycle_count = io.index_data.size
    timespan    = io.range
    puts "#{cycle_count} cycles between #{timespan.first.to_hms} and #{timespan.last.to_hms}"
    cpu_time = io.index_data.inject(0) { |old, info| old + info[:cpu_time] } / 1000
    real_time = timespan.last - timespan.first
    ratio = cpu_time / real_time
    puts "Time: %.2fs CPU / %.2fs real (%i%% CPU use)" % [cpu_time, real_time, ratio * 100]

    if io.index_data.first.has_key?(:event_count)
	min, max = nil
	event_count = io.index_data.inject(0) do |total, cycle_info|
	    count = cycle_info[:event_count]
	    min = count if !min || min > count
	    max = count if !max || max < count
	    total + count
	end
	puts "#{event_count} events, #{event_count / cycle_count} events/cycle (min: #{min}, max: #{max})"
    else
	puts "event count unavailable, please rebuild the index"
    end

    timings = Roby::Log::Timings.new(io)
    if do_csv
	timings.display(false)
    else
	timings.stats
    end
    exit(0)

when "decode"
    require 'roby/log/event_stream'
    require 'roby/log/plan_rebuilder'
    DRb.start_service
    raw, decoded = false, false
    opts = OptionParser.new do |opt|
        opt.on("--raw") { raw = true }
        opt.on("--decoded") { decoded = true }
    end
    filename = opts.parse(ARGV)
    if filename.size != 1
        puts opts
        exit 1
    end

    if !raw && !decoded
        decoded = true
    end

    stream = Roby::LogReplay::EventFileStream.open(filename.first)
    if decoded
        rebuilder = Roby::LogReplay::PlanRebuilder.new
    end
    begin
    while data = stream.read
        data.each_slice(4) do |m, sec, usec, args|
            header = "#{Time.at(sec, usec)} #{m} "
            if raw
                puts "#{header} #{args.map(&:to_s).join("  ")}"
                header = " " * header.size
            end
            if decoded
                decoded_args = args.map do |obj|
                    result = catch(:ignored) do
                        rebuilder.local_object(obj)
                    end
                    rebuilder.process_one_event(m, sec, usec, args)
                    result || obj
                end
                puts "#{header} #{decoded_args.map(&:to_s).join("  ")}"
            end
        end
    end
    rescue Exception => e
        pp e
        raise
    end
    exit(0)
    
when "help"
    usage
    exit(0)

else
    STDERR.puts "no such mode of operation #{mode}"
    usage
    exit(1)
end

